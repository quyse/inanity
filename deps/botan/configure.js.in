exports.configureCompiler = function(objectFile, compiler) {
	var a = /^([^\/]+)\/([^\/]+)$/.exec(objectFile);
	compiler.configuration = a[1];
	compiler.setSourceFile(`repo/src/lib/${a[2].replace(/\./g, '/')}.cpp`);
	compiler.addIncludeDir(`include_${compiler.platform}`);
	compiler.addIncludeDir('include');
	compiler.addIncludeDir('include/external');
	compiler.addIncludeDir('../zlib');
	compiler.addMacro('BOTAN_IS_BEING_BUILT');
	compiler.strict = false;
};

var objectsByPlatform = {
	win32: [
${FILES_WINDOWS}
	],
	linux: [
${FILES_LINUX}
	],
	darwin: [
${FILES_MACOS}
	],
};

exports.configureComposer = function(libraryFile, composer) {
	var a = /^(([^\/]+)\/)([^\/]+)$/.exec(libraryFile);
	var confDir = a[1];
	composer.configuration = a[2];
	var objects = objectsByPlatform[composer.platform];
	for ( var i = 0; i < objects.length; ++i)
		composer.addObjectFile(confDir + objects[i]);
};
