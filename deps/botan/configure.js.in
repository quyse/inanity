exports.configureCompiler = function(objectFile, compiler) {
	var a = /^([^\/]+)\/([^\/]+)$/.exec(objectFile);
	compiler.configuration = a[1];
	compiler.setSourceFile(`repo/src/lib/${a[2].replace(/\./g, '/')}.cpp`);
	compiler.addIncludeDir(`include_${compiler.platform}_${compiler.arch}_${compiler.toolchain}`);
	compiler.addIncludeDir('include');
	compiler.addIncludeDir('../zlib');
	compiler.addMacro('BOTAN_IS_BEING_BUILT');
	compiler.addMacro('BOOST_ASIO_SEPARATE_COMPILATION');
	if(compiler.platform == 'win32') {
		compiler.addMacro('_ENABLE_EXTENDED_ALIGNED_STORAGE');
		compiler.addMacro('_WIN32_WINNT=0x0600');
	}
	compiler.strict = false;
};

var objectsByPlatform = {
	win32_x64_clang: [
${FILES_WIN64_CLANG}
	],
	win32_x86_msvc: [
${FILES_WIN32_MSVC}
	],
	linux_x64: [
${FILES_LINUX64_CLANG}
	],
	darwin_x64: [
${FILES_DARWIN64_CLANG}
	],
	darwin_x86: [
${FILES_DARWIN32_CLANG}
	],
};

exports.configureComposer = function(libraryFile, composer) {
	var a = /^(([^\/]+)\/)([^\/]+)$/.exec(libraryFile);
	var confDir = a[1];
	composer.configuration = a[2];
	var objects = objectsByPlatform[`${composer.platform}_${composer.arch}_${composer.toolchain}`];
	for ( var i = 0; i < objects.length; ++i)
		composer.addObjectFile(confDir + objects[i]);
};
